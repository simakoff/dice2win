// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bet", id.toString(), this);
  }

  static load(id: string): Bet | null {
    return store.get("Bet", id) as Bet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get commit(): BigInt {
    let value = this.get("commit");
    return value.toBigInt();
  }

  set commit(value: BigInt) {
    this.set("commit", Value.fromBigInt(value));
  }

  get gambler(): Bytes {
    let value = this.get("gambler");
    return value.toBytes();
  }

  set gambler(value: Bytes) {
    this.set("gambler", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get win(): boolean {
    let value = this.get("win");
    return value.toBoolean();
  }

  set win(value: boolean) {
    this.set("win", Value.fromBoolean(value));
  }
}

export class Jackpot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Jackpot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Jackpot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Jackpot", id.toString(), this);
  }

  static load(id: string): Jackpot | null {
    return store.get("Jackpot", id) as Jackpot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get betCommit(): BigInt {
    let value = this.get("betCommit");
    return value.toBigInt();
  }

  set betCommit(value: BigInt) {
    this.set("betCommit", Value.fromBigInt(value));
  }

  get gambler(): Bytes {
    let value = this.get("gambler");
    return value.toBytes();
  }

  set gambler(value: Bytes) {
    this.set("gambler", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class DayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DayData", id.toString(), this);
  }

  static load(id: string): DayData | null {
    return store.get("DayData", id) as DayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get betVolume(): BigInt {
    let value = this.get("betVolume");
    return value.toBigInt();
  }

  set betVolume(value: BigInt) {
    this.set("betVolume", Value.fromBigInt(value));
  }

  get winVolume(): BigInt {
    let value = this.get("winVolume");
    return value.toBigInt();
  }

  set winVolume(value: BigInt) {
    this.set("winVolume", Value.fromBigInt(value));
  }

  get jackpotWinVolume(): BigInt {
    let value = this.get("jackpotWinVolume");
    return value.toBigInt();
  }

  set jackpotWinVolume(value: BigInt) {
    this.set("jackpotWinVolume", Value.fromBigInt(value));
  }
}
